import telebot
import config

from telebot import types

from payment import create_comment, generate_link_for_get_payment, get_operations, checking_is_payment_done, get_comment
from const import *
from bets import *

bot = telebot.TeleBot(config.TOKEN)

markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
item1 = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
item2 = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
markup.add(item1, item2)

markup_choice_sport = types.ReplyKeyboardMarkup(resize_keyboard = True)
item_s1 = types.KeyboardButton("–§—É—Ç–±–æ–ª")
item_s2 = types.KeyboardButton("–ë–∞—Å–∫–µ—Ç–±–æ–ª")
item_s3 = types.KeyboardButton("–¢–µ–Ω–Ω–∏—Å")
item_s4 = types.KeyboardButton("–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç")
item_s5 = types.KeyboardButton("–í –Ω–∞—á–∞–ª–æ")

markup_choice_sport.add(item_s1, item_s2, item_s3, item_s4, item_s5)

markup_payment = types.ReplyKeyboardMarkup(resize_keyboard = True)
item_pay1 = types.KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
item_pay2 = types.KeyboardButton("–î—Ä—É–≥–æ–π —Å–ø–æ—Ä—Ç")
item_pay3 = types.KeyboardButton("–í –Ω–∞—á–∞–ª–æ")

markup_payment.add(item_pay1, item_pay2, item_pay3)

markup_paid = types.ReplyKeyboardMarkup(resize_keyboard = True)
it_ok1 = types.KeyboardButton("–û–ø–ª–∞—á–µ–Ω–æ")
it_ok2 = types.KeyboardButton("–í –Ω–∞—á–∞–ª–æ")

markup_paid.add(it_ok1, it_ok2)

admin_markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
admin_item1 = types.KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ User')
admin_item2 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É')

admin_markup.add(admin_item1, admin_item2)

@bot.message_handler(commands=['start'])
def FirstMessage(message):
    if message.chat.id == 1878499259:
        msg = bot.send_message(1878499259, '–ê–¥–º–∏–Ω.', parse_mode = 'html', reply_markup = admin_markup)
        bot.register_next_step_handler(msg, what_bets)
    else:
        welcome_sti = open('static/sticker_welcome.webp', 'rb')
        oferta = open('static/Oferta.pdf', 'rb')
        bot.send_sticker(message.chat.id, welcome_sti)
        bot.send_message(message.chat.id,
        "ü§ñ–ü—Ä–∏–≤–µ—Ç, {0.first_name} –Ø –±–æ—Ç Neurobet - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç–∞–≤–∫–∞–º.\n–Ø –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≥—Ä—É–ø–ø–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤, –∏ —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n\n–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –≤—ã—à–µ 1.7?üëá\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ–≥–æ 3 —à–∞–≥–∞:\n–®–∞–≥ 1‚É£ –í—ã–±–µ—Ä–∏ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞\n–®–∞–≥ 2‚É£ –Ø —Å–æ–æ–±—â—É, –µ—Å—Ç—å –ª–∏ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n–®–∞–≥ 3‚É£ –û–ø–ª–∞—Ç–∏ –∏ –ø–æ–ª—É—á–∏ –ø—Ä–æ–≥–Ω–æ–∑ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –≤—ã—à–µ 1.7\n\n–ò –≤—É–∞-–ª—è, –≤—Å—ë –≥–æ—Ç–æ–≤–æ!\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚ú®".format(message.from_user),
        parse_mode='html', reply_markup = markup)
        bot.send_document(message.chat.id, oferta)


@bot.message_handler(content_types = ['text'])
def choice_sport(message):
    if message.text == '–í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑':
            msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", parse_mode = 'html', reply_markup = markup_choice_sport)
            txt = message.text
            bot.register_next_step_handler(msg, choosing_sport)
    elif message.text == '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ @neurobet_administrator –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º", parse_mode = 'html', reply_markup = markup)

@bot.message_handler(content_types = ['text'])
def choosing_sport(message):
    if message.text not in ('–§—É—Ç–±–æ–ª', '–ë–∞—Å–∫–µ—Ç–±–æ–ª', '–¢–µ–Ω–Ω–∏—Å', '–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç', '–í –Ω–∞—á–∞–ª–æ'):
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é :(\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è!', parse_mode = 'html', reply_markup = markup)
        choice_sport(message)
    if message.text == '–§—É—Ç–±–æ–ª':
        msg = bot.send_message(message.chat.id, "{0}".format(FOOTBAL_BET), parse_mode = 'html', reply_markup = markup_payment)
        txt = message.text
        bot.register_next_step_handler(msg, lambda c: paying_for_bet(c, txt))
    elif message.text == '–ë–∞—Å–∫–µ—Ç–±–æ–ª':
        msg = bot.send_message(message.chat.id, "{0}".format(BASKETBALL_BET), parse_mode = 'html', reply_markup = markup_payment)
        txt = message.text
        bot.register_next_step_handler(msg, lambda c: paying_for_bet(c, txt))
    elif message.text == '–¢–µ–Ω–Ω–∏—Å':
        msg = bot.send_message(message.chat.id, "{0}".format(TENNIS_BET), parse_mode = 'html', reply_markup = markup_payment)
        txt = message.text
        bot.register_next_step_handler(msg, lambda c: paying_for_bet(c, txt))
    elif message.text == '–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç':
        msg = bot.send_message(message.chat.id, "{0}".format(CYBER_BET), parse_mode = 'html', reply_markup = markup_payment)
        txt = message.text
        bot.register_next_step_handler(msg, lambda c: paying_for_bet(c, txt))
    elif message.text == '–í –Ω–∞—á–∞–ª–æ':
        bot.send_message(message.chat.id,'–ñ–º–∏ "–í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"!', reply_markup = markup)
        choice_sport(message)

@bot.message_handler(content_types = ['text'])
def paying_for_bet(message, text):
    #bot.send_message(message.chat.id, '')
    if message.text not in ('–í –Ω–∞—á–∞–ª–æ', '–î—Ä—É–≥–æ–π —Å–ø–æ—Ä—Ç', '–û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'):
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é :(\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è!', parse_mode = 'html', reply_markup = markup)
        choice_sport(message)
    if message.text == '–í –Ω–∞—á–∞–ª–æ':
        bot.send_message(message.chat.id, '–ñ–º–∏ "–í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"!\n–¢–µ–±—è –∂–¥—É—Ç —Ö–æ—Ä–æ—à–∏–µ –¥–µ–Ω—å–≥–∏, –¥—Ä—É–≥!', reply_markup = markup)
        choice_sport(message)
    if message.text == '–î—Ä—É–≥–æ–π —Å–ø–æ—Ä—Ç':
        msg = bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º :-)', reply_markup = markup_choice_sport)
        bot.register_next_step_handler(msg, choosing_sport)
    if message.text == '–û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑':
        txt = text
        comment_index = create_comment()
        link_for_payment = generate_link_for_get_payment(comment_index, CONST_AMOUNT)
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ ¬´–û–ø–ª–∞—á–µ–Ω–æ¬ª –≤ —á–∞—Ç–µ.\n–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã –≤ –æ–∫–Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: " + str(comment_index), parse_mode = 'html', reply_markup = None)
        msg = bot.send_message(message.chat.id, link_for_payment, parse_mode = 'html', reply_markup = markup_paid)
        bot.register_next_step_handler(msg, lambda m: process_payment(m, txt))

def process_payment(message, text):
    if message.text not in ('–í –Ω–∞—á–∞–ª–æ', '–û–ø–ª–∞—á–µ–Ω–æ'):
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é :(\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è!', parse_mode = 'html', reply_markup = markup)
        choice_sport(message)
    if message.text == '–í –Ω–∞—á–∞–ª–æ':
        bot.send_message(message.chat.id, '–ñ–º–∏ "–í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"!\n–¢–µ–±—è –∂–¥—É—Ç —Ö–æ—Ä–æ—à–∏–µ –¥–µ–Ω—å–≥–∏, –¥—Ä—É–≥!', reply_markup = markup)
        choice_sport(message)
    elif message.text == '–û–ø–ª–∞—á–µ–Ω–æ':
        msg = bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ", parse_mode = 'html', reply_markup = markup)
        get_operations()
        well_sti = open('static/sticker_well.webp', 'rb')
        if checking_is_payment_done(get_comment(), CONST_AMOUNT):
            if text == '–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç':
                bot.send_message(message.chat.id, "{0}\n\n–£–¥–∞—á–∏!".format(get_last_bet(text)), parse_mode = 'html', reply_markup = markup)
                bot.send_sticker(message.chat.id, well_sti)
                choice_sport(message)
            if text == '–ë–∞—Å–∫–µ—Ç–±–æ–ª':
                bot.send_message(message.chat.id,  "{0}\n\n–£–¥–∞—á–∏!".format(get_last_bet(text)), parse_mode = 'html', reply_markup = markup)
                bot.send_sticker(message.chat.id, well_sti)
                choice_sport(message)
            if text == '–¢–µ–Ω–Ω–∏—Å':
                bot.send_message(message.chat.id,  "{0}\n\n–£–¥–∞—á–∏!".format(get_last_bet(text)), parse_mode = 'html', reply_markup = markup)
                bot.send_sticker(message.chat.id, well_sti)
                choice_sport(message)
            if text == '–§—É—Ç–±–æ–ª':
                bot.send_message(message.chat.id,  "{0}\n\n–£–¥–∞—á–∏!".format(get_last_bet(text)), parse_mode = 'html', reply_markup = markup)
                bot.send_sticker(message.chat.id, well_sti)
                choice_sport(message)
        elif not checking_is_payment_done(get_comment(), CONST_AMOUNT):
                bot.send_message(message.chat.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –µ—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @neurobet_administrator", parse_mode = 'html', reply_markup = markup)
                choice_sport(message)
        else:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∏–Ω–∞—á–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.", parse_mode = 'html', reply_markup = markup)
            choice_sport(message)

bot.polling(none_stop=True)
